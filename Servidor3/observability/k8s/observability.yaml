apiVersion: v1
kind: Namespace
metadata:
  name: observability

---
# ConfigMap de Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: observability
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: fastapi
        metrics_path: /metrics
        static_configs:
          - targets: ["fastapi-service.default.svc.cluster.local:8000"]

---
# Despliegue de Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config

---
# Service de Prometheus en NodePort
apiVersion: v1
kind: Service
metadata:
  name: prometheus-nodeport
  namespace: observability
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
    - name: web
      port: 9090
      targetPort: 9090
      nodePort: 30090

---
# ConfigMap para aprovisionamiento de data sources en Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning-datasources
  namespace: observability
  labels:
    app: grafana
data:
  prometheus.yaml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-nodeport.observability.svc.cluster.local:9090
        isDefault: true
        version: 1
        editable: false

---
# Despliegue de Grafana con montaje del ConfigMap de data sources
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Admin"
          volumeMounts:
            - name: provisioning-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
      volumes:
        - name: provisioning-datasources
          configMap:
            name: grafana-provisioning-datasources

---
# Service de Grafana en NodePort
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  namespace: observability
spec:
  type: NodePort
  selector:
    app: grafana
  ports:
    - name: web
      port: 3000
      targetPort: 3000
      nodePort: 30030
